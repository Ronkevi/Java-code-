import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

public class CommonWordFinder {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter directory name: ");
        String directoryPath = scanner.nextLine();

        try {
            Map<String, Integer> wordFrequencyMap = new HashMap<>();

            Files.walk(Paths.get(directoryPath))
                    .filter(Files::isRegularFile)
                    .forEach(file -> processFile(file, wordFrequencyMap));

            displayMostCommonWords(wordFrequencyMap);
        } catch (IOException e) {
            System.out.println("Error reading files: " + e.getMessage());
        }
    }

    private static void processFile(Path filePath, Map<String, Integer> wordFrequencyMap) {
        try {
            Files.lines(filePath)
                    .flatMap(line -> Arrays.stream(line.toLowerCase().split("\\s+")))
                    .map(word -> word.replaceAll("[^a-zA-Z]", ""))
                    .filter(word -> !word.isEmpty())
                    .forEach(word -> wordFrequencyMap.merge(word, 1, Integer::sum));
        } catch (IOException e) {
            System.out.println("Error reading file " + filePath + ": " + e.getMessage());
        }
    }

    private static void displayMostCommonWords(Map<String, Integer> wordFrequencyMap) {
        int maxFrequency = 0;

        for (Map.Entry<String, Integer> entry : wordFrequencyMap.entrySet()) {
            if (entry.getValue() > maxFrequency) {
                maxFrequency = entry.getValue();
            }
        }

        final int finalMaxFrequency = maxFrequency;

        wordFrequencyMap.entrySet().stream()
                .filter(entry -> entry.getValue() == finalMaxFrequency)
                .forEach(entry -> System.out.println("Word: " + entry.getKey() + ", Frequency: " + entry.getValue()));
    }
